#include <stdio.h>
#include <stdlib.h>
int ** Allocation(int n)
    {
            int i,**P;
        	P=(int **)malloc(sizeof(int**)*(2*n-1));
        	for(i=0;i<2*n-1;i++)
        	    P[i]=(int *)malloc(sizeof(int *)*(2*n-1));
    	    return P;
        }
void Premier_damier(int **P,int n)
    {
        int i,j,c=1;
    	for(j=0;j<n;j++)
    	    for(i=n-1;i<2*n-1;i++)
    	        {
    	            P[j+(i+1-n)][i-j]=c++;
    	        }
    }
/*
void Premier_Damier(int **P,int n)
    {
        int i,j;
        for(i=0;i<n/2;i++)
            for(j=n/2+1;j<2*n-1-(n/2+1);j++)
                if(P[i][j]!=0)
                    P[i+n][j]=P[i][j];
    
        for(i=n/2+1;i<2*n-1-(n/2+1);i++)
            for(j=0;j<n/2;j++)
                if(P[i][j]!=0)
                    P[i][j+n]=P[i][j];
                    
    	for(i=n/2+1;i<2*n-1-(n/2+1);i++)
            for(j=2*n-1-n/2;j<2*n-1;j++)
                if(P[i][j]!=0)
                    P[i][j-n]=P[i][j];
                        
    	for(i=2*n-1-n/2;i<2*n-1;i++)
            for(j=n/2+1;j<2*n-1-(n/2+1);j++)
                if(P[i][j]!=0)
                    P[i-n][j]=P[i][j];
    }
*/
void Deuxiem_damier(int **P,int n)
    {
        int i,j;
        for(i=0;i<n/2;i++)
        {
            for(j=n/2+1;j<2*n-1-(n/2+1);j++)
                {
                    if(P[i][j]!=0) // if(((i+j)>=n-1)&&(i+j)%2==0)
                    {
                        //On peut affecter les 3 quadrants par on utilisant un seul parcour
                        P[i+n][j]=P[i][j];
                        P[j][i+n]=P[j][i];
                        P[n-2-i][j]=P[2*(n-1)-i][j];
                        P[j][n-2-i]=P[j][2*(n-1)-i];
                    }
                }
        }
    }
/*void Deuxieme_damier(int **P,int n)
        {
        int i,j;
        for(i=n/2;i<n/2+n;i++)
            for(j=n/2;j<n/2+n;j++)
                {
                    if(P[i][j]==0)
                    {
                        if((i+n)<2*n-1&&P[i+n][j]!=0)
                            P[i][j]=P[i+n][j];
                        else if((j+n)<2*n-1&&P[i][j+n]!=0)
                            P[i][j]=P[i][j+n];
                        else if(i-n>=0&&P[i-n][j]!=0)
                            P[i][j]=P[i-n][j];
                        else if(j-n>=0&&P[i][j-n]!=0)
                            P[i][j]=P[i][j-n];
                    }
                    
                }
        }
    void 2eme_damier(int **P,int n)
        {
            for(i=0;i<n/2;i++)
                for(j=n/2+1;j<2*n-1-(n/2+1);j++)
                    if(P[i][j]!=0)
                        P[i+n][j]=P[i][j];
        
            for(i=n/2+1;i<2*n-1-(n/2+1);i++)
                for(j=0;j<n/2;j++)
                    if(P[i][j]!=0)
                        P[i][j+n]=P[i][j];
                        
        	for(i=n/2+1;i<2*n-1-(n/2+1);i++)
                for(j=2*n-1-n/2;j<2*n-1;j++)
                    if(P[i][j]!=0)
                        P[i][j-n]=P[i][j];
                            
        	for(i=2*n-1-n/2;i<2*n-1;i++)
                for(j=n/2+1;j<2*n-1-(n/2+1);j++)
                    if(P[i][j]!=0)
                        P[i-n][j]=P[i][j];
                            
        }
*/
void vider_memoire (int **P,int n)
    {
        int i,j;
        for(i=0;i<n;i++)
            free(P[i]);
        free(P);
    }
int main(void) {
    
    //Initialisation des elements du tableau par 0
    /*for(i=0;i<2*n-1;i++)
        for(j=0;j<2*n-1;j++)
            P[i][j]=0;*/
            
    int **P,n,i,j;
    scanf("%d",&n);
    P=Allocation(n);
    Premier_damier(P,n);
    Deuxiem_damier(P,n);
    //Affichage du carre magique
	for(j=n/2;j<n/2+n;j++)
	    {
	        for(i=n/2;i<n/2+n;i++)
	        {
	            printf("%d\t",P[j][i]);
	            
	        }
	        printf("\n");
	    }
	return 0;
}
